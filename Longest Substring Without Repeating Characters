class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int arr[256]; // char is 1 byte, which means only 256 possible character
					 // arr record the last index a character appears.
		
        memset(arr, -1, sizeof(arr)); // Initialization(-1 means haven't appear in the string)
        
		int max_dist = 0, start = -1; // start record the first character index of current substring 
        
		for(int i = 0; i < s.length(); ++i) {
            if(arr[s[i]] >= start) { // In the current interval, a repeating characters appear
                start = arr[s[i]] + 1; // Update the first word index
            }
            arr[s[i]] = i; // Updated the last time the character appear
            max_dist = max(max_dist, i - start + 1);
        }
        return max_dist;
    }
};
